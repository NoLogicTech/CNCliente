@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Inputs
@using Newtonsoft.Json
@using Blazor.Models
@inject HttpClient httpclient

@page "/tcliente"

@{

}

@error123
<div class="flex bg-gray-100 flex-grow flex-col">
    <div class="flex p-4 font-bold text-2xl text-gray-800 border-b-2 mx-3 border-blue-600 border-opacity-90 h-14 ">
        <p>TABELAS</p>
        <p class="px-3"> | </p>
        <p>CLIENTES</p>
    </div>
    <div class="flex bg-white m-3 rounded-sm shadow-lg">
        <div class="flex">

            <SfGrid @ref="DefaultGrid" ID="Grid" TValue="Cliente" Toolbar=@ToolbarItems AllowSorting="true" AllowPaging="true"
                    AllowExcelExport="true" AllowPdfExport="true" ContextMenuItems=@ContextMenuItems>
                <SfDataManager Url="api/Cliente" CrossDomain="true" Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>

                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Normal">
                </GridEditSettings>
                <GridSelectionSettings Type="SelectionType.Multiple"></GridSelectionSettings>
                <SfToolbar>
                    <ToolbarItems>
                        <ToolbarItem Type="ItemType.Input" Align="Syncfusion.Blazor.Navigations.ItemAlign.Left">
                            <Template>
                                <span class="e-search-icon e-icons" style="padding-right: 4pt;"></span>
                                <SfTextBox Placeholder="Pesquisar" Input="OnInput" Width="500px"></SfTextBox>
                            </Template>
                        </ToolbarItem>
                    </ToolbarItems>
                </SfToolbar>
                <GridPageSettings PageSizes="true"></GridPageSettings>
                <GridEvents OnActionFailure="ActionFailureHandler" OnToolbarClick="ToolbarClickHandler" TValue="Cliente">
                </GridEvents>

                <GridColumns>
                    <GridColumn Field=@nameof(Cliente.ClienteId) HeaderText="ID" IsPrimaryKey="true" IsIdentity="true" Width="10"
                                AllowSearching="false" Visible="false">
                    </GridColumn>
                    <GridColumn Field=@nameof(Cliente.ClienteErpid) HeaderText="ERP ID" Width="10">
                    </GridColumn>
                    <GridColumn Field=@nameof(Cliente.ClienteNipc) HeaderText="NIPC" Width="30">
                    </GridColumn>
                    <GridColumn Field=@nameof(Cliente.ClienteNome) HeaderText="Designação" Width="90">
                    </GridColumn>
                    <GridColumn Field=@nameof(Cliente.ClienteTelefone) HeaderText="Telefone" Width="30">
                    </GridColumn>
                    <GridColumn Field=@nameof(Cliente.ClienteEmail) HeaderText="E-mail" Width="40">
                    </GridColumn>
                </GridColumns>

            </SfGrid>
        </div>
    </div>
</div>

<style>
    .e-grid .e-headercell {
        background-color: rgba(37, 99, 235, 0.9);
        font-weight: bolder;
        color: white;
    }
</style>

@code {
    private SfGrid<Cliente> DefaultGrid;

    public void OnInput(InputEventArgs args)
    {
        this.DefaultGrid.Search(args.Value);
    }

    private List<object> ToolbarItems = new List<object>()
    {
        new ItemModel() {Text = "Novo", PrefixIcon = "e-add", Id = "Grid_add"},
        new ItemModel() {Text = "Editar", PrefixIcon = "e-edit", Id = "Grid_edit"},
        new ItemModel() {Text = "Apagar", PrefixIcon = "e-delete", Id = "Grid_delete"},
        new ItemModel() {Text = "Guardar", PrefixIcon = "e-update", Id = "Grid_update"},
        new ItemModel() {Text = "Cancelar", PrefixIcon = "e-cancel", Id = "Grid_cancel"},
        new ItemModel() {Text = "Excel", PrefixIcon = "e-excelexport", Id = "Grid_excelexport"},
        new ItemModel() {Text = "PDF", PrefixIcon = "e-pdfexport", Id = "Grid_pdfexport"}
    };

    private List<object> ContextMenuItems = new List<object>()
    {
        "Edit",
        "Delete",
        "Copy"
    };

    public string error123;

    public void ActionFailureHandler()
    {
    // Exception myReturnedException = args.Error;
    //error123 = myReturnedException.ToString();
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            await this.DefaultGrid.ExcelExport();
        }

        if (args.Item.Id == "Grid_pdfexport") //Id is combination of Grid's ID and itemname
        {
            await this.DefaultGrid.PdfExport();
        }
    }

}